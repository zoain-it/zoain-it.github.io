<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 记录</title><link>https://blog.zoain.me/posts/</link><description>Recent content in Posts on 记录</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 09 Apr 2021 22:09:23 +0800</lastBuildDate><atom:link href="https://blog.zoain.me/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>操作系统概述</title><link>https://blog.zoain.me/2021/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link><pubDate>Fri, 09 Apr 2021 22:09:23 +0800</pubDate><guid>https://blog.zoain.me/2021/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid><description>操作系统 向下管理各种计算资源，向上为应用程序提供运行环境和开发支撑，为用户提供交互界面。
1. 什么是操作系统 狭义的操作系统指的是操作系统内核加上一个Shell。 广义的操作系统又可以进一步分为操作系统内核与操作系统框架两层。 简要结构 Android 操作系统结构 应用程序 Android 应用 操作系统（框架、内核） Android 操作系统（Android 框架、Linux 内核） 硬件设备 智能手机设备 1.1 硬件角度 操作系统将复杂的、具备不同功能的硬件资源纳入统一管理。此外，操作系统还通过设备驱动来管理各种外部设备的运行并处理可能的错误情况。 操作系统负责将硬件抽象成不依赖具体硬件特性的资源。在这个过程中，操作系统的核心功能是将有限的、离散的资源高效地抽象为无限的、连续的资源，并通过易用的接口提供给上层的应用，从而使应用无须关心硬件的具体细节。 1.2 软件角度 操作系统提供了各种不同层次、不同功能的接口（如系统调用等）以满足应用的需求，还提供了不同类型的访问控制、应用间交互等服务。 操作系统还负责对应用生命周期的管理，包括应用的加载、启动、切换、调度、销毁等。通过对应用的管理，操作系统弄够从全局角度进行资源分配，从而保证应用间的公平性、性能与安全的隔离型，限制少数恶意应用对系统整体产生的影响。 1.3 操作系统必要性的思考 如果一台机器有且只有一个应用程序，开机后自动运行且不会退出，是否还需要操作系统？
如果没有操作系统，那么应用就需要直接和硬件打交道，直接实现对硬件资源的管理与抽象的功能，如果应用出现故障，就可能引起计算机直接崩溃，而没有诊断和调试的机会。
如果一个应用希望直接控制硬件而不是使用操作系统提供的抽象，是否还需要操作系统？ 尽管应用希望直接控制硬件，但是应用的加载与销毁、多个应用之间的切换与隔离等管理工作依然需要操作系统来完成。
2. 操作系统接口 操作系统提供了不同层次的接口，主要包括系统调用接口、POSIX 接口、领域应用接口。
领域应用接口 AutoSAR ROS Android 应用框架 POSIX 接口 glibc musl bionic 系统调用接口 Linux 内核 macOS 内核（xnu） ChCore 内核 2.</description><content type="html"><![CDATA[<h2 id="操作系统">操作系统</h2>
<p>向下管理各种计算资源，向上为应用程序提供运行环境和开发支撑，为用户提供交互界面。</p>
<h3 id="1-什么是操作系统">1. 什么是操作系统</h3>
<ol>
<li>狭义的操作系统指的是操作系统内核加上一个Shell。</li>
<li>广义的操作系统又可以进一步分为操作系统内核与操作系统框架两层。</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">简要结构</th>
<th style="text-align:center">Android 操作系统结构</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">应用程序</td>
<td style="text-align:center">Android 应用</td>
</tr>
<tr>
<td style="text-align:center">操作系统（框架、内核）</td>
<td style="text-align:center">Android 操作系统（Android 框架、Linux 内核）</td>
</tr>
<tr>
<td style="text-align:center">硬件设备</td>
<td style="text-align:center">智能手机设备</td>
</tr>
</tbody>
</table>
<h4 id="11-硬件角度">1.1 硬件角度</h4>
<ol>
<li>操作系统将复杂的、具备不同功能的硬件资源纳入统一管理。此外，操作系统还通过设备驱动来管理各种外部设备的运行并处理可能的错误情况。</li>
<li>操作系统负责将硬件抽象成不依赖具体硬件特性的资源。在这个过程中，操作系统的核心功能是<code>将有限的、离散的资源高效地抽象为无限的、连续的资源</code>，并通过易用的接口提供给上层的应用，从而使应用无须关心硬件的具体细节。</li>
</ol>
<h4 id="12-软件角度">1.2 软件角度</h4>
<ol>
<li>操作系统提供了各种不同层次、不同功能的接口（如系统调用等）以满足应用的需求，还提供了不同类型的访问控制、应用间交互等服务。</li>
<li>操作系统还负责对应用生命周期的管理，包括应用的加载、启动、切换、调度、销毁等。通过对应用的管理，操作系统弄够从全局角度进行资源分配，从而保证应用间的公平性、性能与安全的隔离型，限制少数恶意应用对系统整体产生的影响。</li>
</ol>
<h4 id="13-操作系统必要性的思考">1.3 操作系统必要性的思考</h4>
<ol>
<li>如果一台机器有且只有一个应用程序，开机后自动运行且不会退出，是否还需要操作系统？<br></li>
</ol>
<blockquote>
<p>如果没有操作系统，那么应用就需要直接和硬件打交道，直接实现对硬件资源的管理与抽象的功能，如果应用出现故障，就可能引起计算机直接崩溃，而没有诊断和调试的机会。</p>
</blockquote>
<ol start="2">
<li>如果一个应用希望直接控制硬件而不是使用操作系统提供的抽象，是否还需要操作系统？</li>
</ol>
<blockquote>
<p>尽管应用希望直接控制硬件，但是应用的加载与销毁、多个应用之间的切换与隔离等管理工作依然需要操作系统来完成。</p>
</blockquote>
<h3 id="2-操作系统接口">2. 操作系统接口</h3>
<p>操作系统提供了不同层次的接口，主要包括系统调用接口、POSIX 接口、领域应用接口。</p>
<table>
<tbody>
<tr>
<th style="text-align:center" colspan="3">领域应用接口</th>
</tr>
<tr>
<td style="text-align:center">AutoSAR</td>
<td style="text-align:center">ROS</td>
<td style="text-align:center">Android 应用框架</td>
</tr>
<tr>
<th style="text-align:center" colspan="3">POSIX 接口</th>
</tr>
<tr>
<td style="text-align:center">glibc</td>
<td style="text-align:center">musl</td>
<td style="text-align:center">bionic</td>
</tr>
<tr>
<th style="text-align:center" colspan="3">系统调用接口</th>
</tr>
<tr>
<td style="text-align:center">Linux 内核</td>
<td style="text-align:center">macOS 内核（xnu）</td>
<td style="text-align:center">ChCore 内核</td>
</tr>
</tbody>
</table>
<h4 id="21-系统调用接口">2.1 系统调用接口</h4>
<p>应用程序通过操作系统内核提供的接口向内核申请服务（系统调用是用户态应用向操作系统内核请求服务的方法）。</p>
<pre><code>------------------------------&gt;用户地址空间
// 应用程序
#include &lt;stdio.h&gt;

int main() {
    printf(&quot;Hello World!\n&quot;);
    return 0;
}
&lt;------------------------------

------------------------------&gt;用户地址空间
// libc
write(1, &quot;Hello World!\n&quot;, 13) {
    ...
    /* 传参过程 */
    mov x0, #__NR_write /* 第 1 个参数：系统调用ID */
    mov x1, #1          /* 第 2 个参数：文件描述符地址 */
    mov x2, x4          /* 第 3 个参数：字符串首地址 */
    mov x3, #13         /* 第 4 个参数：字符串长度 */
    svc #0              /* 执行 svc 指令，进入内核 */
    ...
}
&lt;------------------------------

------------------------------&gt;内核地址空间
// 下陷处理
sys_syscall:
    ...
    bl syscall_table[__NR_write]
    ...
&lt;------------------------------

------------------------------&gt;内核地址空间
// 系统调用处理
sys_write {
    ...
    return error_no;
}
&lt;------------------------------
</code></pre><p>以 Hello World 程序中的 <code>printf</code> 为例展示了系统调用的执行过程。首先，<code>printf</code> 调用标准库 <em><strong>libc</strong></em> 中的 <code>write</code> 函数。<em><strong>libc</strong></em> 在准备好相关的参数后，执行 <code>svc</code> 指令使得控制流从用户地址空间下陷到内核地址空间。操作系统的下陷处理函数根据系统调用传入的第一个参数，识别出改调用需要执行操作系统内核提供的 <code>sys_write</code> 函数，从而通过系统调用表调用对应函数。</p>
<h4 id="22-posix-接口">2.2 POSIX 接口</h4>
<p>由于每个操作系统提供的系统调用各不相同，为了同一个应用程序在不同操作系统上的可移植性，逐渐形成了一些可移植操作系统接口标准，例如 <strong>POSIX</strong>。<strong>POSIX</strong> 是 Portable Operating System Interface for uniX 的简称，中文译为可移植操作系统接口，X 表明其是对 UNIX API 的传承。<strong>POSIX</strong> 标准通常通过 C Library（<strong>libc</strong>）来实现，常见的 <strong>libc</strong> 包括 glibc，musl，eglibc。Android 也实现了一个名为 bionic 的 libc。通常而言，应用程序只需要调用 <strong>libc</strong> 提供的接口就可以实现对操作系统功能的调用，同时也实现了应用在类 UNIX 系统（包括 Linux）上的可移植性。</p>
<h4 id="23-领域应用接口">2.3 领域应用接口</h4>
<p>在 <strong>POSIX</strong> 或操作系统调用的基础上还可以封装面向不同领域的领域应用接口。为了开发的便捷性（如更多可复用的功能），人们逐渐开始为各个应用领域定义应用开发接口与软件架构。</p>
]]></content></item><item><title>About You</title><link>https://blog.zoain.me/2021/02/about-you/</link><pubDate>Wed, 24 Feb 2021 00:34:29 +0800</pubDate><guid>https://blog.zoain.me/2021/02/about-you/</guid><description/><content type="html"></content></item></channel></rss>